/**
*
* DO NOT EDIT THIS FILE. EDIT .js6 INSTEAD
*
*/

'use strict';

const appDir = require('app-root-path').path;
const ospath = require('path');
const request = require('request-promise');
const _ = require('lodash');

const config = require(ospath.join(appDir, 'config'));
const BaseJob = require(ospath.join(appDir, 'jobs', 'basejob'));
const utils = require(ospath.join(appDir, 'utils'));
const log = utils.log();

const moment = require('moment-timezone');
const pgsqlConfig = config.getData().pgsql;

class AqConsHourlyLastdataPuertoRealJob extends BaseJob {

  constructor(cfg) {
    super(cfg);
  }

  getCreateTable(data) {
    // Creation of the needed tables occurs in the vertical/category creation
    return 'SELECT 1 AS placeholder;';
  }

  _aggregate(job, done) {
    /*
     * - type: aqConsHourlyForPuertoReal
     *   tableName: aq_cons_const_lastdata
     *   job: aq_cons_hourlyForPuertoRealjob
     *   category: aq_cons
     *   magnitudeRange: 1
     *   unitRange: hour
     *   truncateToUnit: hour
     *   schedule: '10 2 * * * *'
     *   carto: false
     */

    let models = {
      "nov_jun_week": {
        "1" : [ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ],
        "180" : [ 2,0,1,1,3,6,14,26,25,1,1,1,1,15,20,1,1,1,1,1,20,25,10,2 ],
        "315" : [ 3,1,1,1,1,1,70,80,60,1,1,1,1,1,1,1,1,20,25,20,10,5,5,3 ],
        "560" : [ 1,1,1,1,1,1,80,80,80,5,5,5,10,10,10,3,3,2,80,80,80,10,10,0 ],
        "10000" : [ 1,1,1,1,1,1,90,90,90,7,7,7,10,10,10,4,4,4,90,90,90,20,20,0 ]
      },
      "nov_jun_weekend" : {
        "1" : [ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ],
        "135" : [ 3,1,1,1,1,1,1,1,10,10,10,10,2,2,1,1,1,1,10,15,20,20,10,1 ],
        "255" : [ 1,1,1,1,1,1,1,1,1,20,30,30,40,5,1,1,1,1,10,15,50,30,10,1 ],
        "440" : [ 5,1,1,1,1,1,1,20,40,40,1,1,10,20,10,10,10,10,50,50,50,50,50,6 ],
        "10000" : [ 33,1,1,1,1,1,1,60,60,60,10,10,10,30,30,30,30,30,70,70,70,70,70,30 ]
      },
      "jul_oct_week": {
        "1" : [ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ],
        "180" : [ 2,0,1,1,3,6,14,26,25,1,1,1,1,15,20,1,1,1,1,1,20,25,10,2 ],
        "315" : [ 3,1,1,1,1,1,70,80,60,1,1,1,1,1,1,1,1,20,25,20,10,5,5,3 ],
        "560" : [ 1,1,1,1,1,1,80,80,80,5,5,5,10,10,10,3,3,2,80,80,80,10,10,0 ],
        "10000" : [ 1,1,1,1,1,1,90,90,90,7,7,7,10,10,10,4,4,4,90,90,90,20,20,0 ]
      },
      "jul_oct_weekend" : {
        "1" : [ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ],
        "135" : [ 3,1,1,1,1,1,1,1,10,10,10,10,2,2,1,1,1,1,10,15,20,20,10,1 ],
        "255" : [ 1,1,1,1,1,1,1,1,1,20,30,30,40,5,1,1,1,1,10,15,50,30,10,1 ],
        "440" : [ 5,1,1,1,1,1,1,20,40,40,1,1,10,20,10,10,10,10,50,50,50,50,50,6 ],
        "10000" : [ 33,1,1,1,1,1,1,60,60,60,10,10,10,30,30,30,30,30,70,70,70,70,70,30 ]
      },
    };

    const weekDays = [1,2,3,4,5];
    const winterSpring = [0,1,2,3,4,5];
    const jobInfo = `job ${job.id}: type '${job.type}' - title '${job.data.title}'`;
    const fromDate = new moment(job.data.date).subtract(job.data.magnitudeRange, job.data.unitRange).startOf(job.data.truncateToUnit).toISOString();
    const datePattern = /\d{4}-\d{1,2}-\d{1,2}/;

    log.debug('jobInfo', jobInfo);
    log.debug('fromDate', fromDate);

    var options = {
      uri: 'http://77.241.112.100:8077/gen-publicservices-web/rest/contadores/lecturas',
      qs: {
        "desde":"2018-01-01",
        "hasta": "2018-01-02"
      },
      headers: {
          "User-Agent": "Request-Promise",
          "Accept": "application/json",
          "X_API_KEY": "eyJhbGciOiJIUzUxMiJ9.eyJqdGkiOiI0NjUwN2JlMi1hNDQ1LTQzNjItYTI2Mi00NTZkM2Q3M2I2NWQiLCJpYXQiOjE1NDYyMTQ0MDEsImV4cCI6MTU0ODgwNjQwMSwic3ViIjoiSVNPSU4gLSBQcm95ZWN0byBBcXVhU0lHIChJZ25hY2lvIERvbWluZ29zKSJ9.I9PKTZXPfFl_N4wLM6jy-V-SKF25MMOlbH0zM5sDeSMAzOnJ_pmXWb4JStL3mPGP-pyjfE1_hjoVddwuwBrOcg"
      },
      json: true
    };

    request(options)
    .then(function (data) {

        let bynumSerie =  _(data).groupBy(v => ([v.numSerie]))
                          .map( v =>
                            _.merge(
                              _.pick( v[1], 'numSerie', 'fechaHora'),
                              {'volumenL': _.subtract( v[1]['volumenL'], v[0]['volumenL'] ) }
                            )
                          )
                          .value();


        bynumSerie.forEach(element => {

          if (element.volumenL != '0') {
            console.log('element', element);
            let secDate = new Date(element.fechaHora);
            let secWeekDay = secDate.getDay();
            let secMonth = secDate.getMonth();
            let monthDay = "jul_oct";
            if ( winterSpring.indexOf(secMonth) > -1 ) {
              monthDay = "nov_jun"
            }
            if ( weekDays.indexOf(secWeekDay) > -1 ) {
              monthDay = monthDay + '_week';
            } else {
              monthDay = monthDay + '_weekend';
            }
            for (let totalL in models[monthDay]) {
              if  ( element.volumenL >= totalL ) {
                continue;
              } else {
                for (let hour in models[monthDay][totalL]) {
                  let percent = models[monthDay][totalL][hour] * 100 / totalL;
                  let valueL = ( percent * element.volumenL / 100 ) + ( (Math.random() * 0.007) + 0.001 ) ;
                  let date = datePattern.exec(element.fechaHora)[0] + 'T' + ("0" + hour).slice(-2) + ':00:00Z';
                  let sql = `SELECT urbo_aq_cons_propagate_lastdata_puertoreal('madrid', 'construction_id:${element.numSerie}', ${valueL}, ${date})
                  `;
                  console.log(sql);
                  // this.pgModel.promise_query(sql, null, callback);

                }
                break;
              }
            }
          }

        });

        promise.all(promises);
    })
    .catch(function (err) {
        console.log("err", err);

    });





    // this.pgModel.query(sql, null, callback);
  }


}

module.exports = AqConsHourlyLastdataPuertoRealJob;
